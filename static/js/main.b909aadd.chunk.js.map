{"version":3,"sources":["components/Form/index.jsx","App.js","serviceWorker.js","index.js"],"names":["initialState","name","email","password","nameError","emailError","passwordError","ValidationForm","state","handleChange","event","isCheckbox","target","type","setState","checked","value","validate","includes","length","handleSubmit","preventDefault","console","log","className","onSubmit","this","label","placeholder","onChange","React","Component","App","visible","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2RAaMA,G,MAAe,CACnBC,KAAM,GACNC,MAAO,GACPC,SAAU,GACVC,UAAW,GACXC,WAAY,GACZC,cAAe,KAGIC,E,4MACnBC,MAAQR,E,EAERS,aAAe,SAACC,GACd,IAAMC,EAAmC,aAAtBD,EAAME,OAAOC,KAChC,EAAKC,SAAL,eACGJ,EAAME,OAAOX,KAAOU,EACjBD,EAAME,OAAOG,QACbL,EAAME,OAAOI,S,EAIrBC,SAAW,WACT,IAAIb,EAAY,GACZC,EAAa,GACbC,EAAgB,GAcpB,OAZK,EAAKE,MAAMP,OACdG,EAAY,kBAGT,EAAKI,MAAMN,MAAMgB,SAAS,OAC7Bb,EAAa,iBAGX,EAAKG,MAAML,SAASgB,OAAS,IAC/Bb,EAAgB,kDAGdF,GAAaC,GAAcC,KAC7B,EAAKQ,SAAS,CAAEV,YAAWC,aAAYC,mBAChC,I,EAMXc,aAAe,SAACV,GACdA,EAAMW,iBACU,EAAKJ,aAEnBK,QAAQC,IAAI,EAAKf,OAEjB,EAAKM,SAASd,K,uDAQhB,OACE,0BAAMwB,UAAU,OAAOC,SAAUC,KAAKN,cACpC,6BACE,yCACA,2BACEI,UAAU,QACVvB,KAAK,OACL0B,MAAM,YACNC,YAAY,OACZf,KAAK,OACLG,MAAOU,KAAKlB,MAAMP,KAClB4B,SAAUH,KAAKjB,eAEjB,yBAAKe,UAAU,SAASE,KAAKlB,MAAMJ,YAErC,6BACE,0CACA,2BACEoB,UAAU,QACVvB,KAAK,QACL0B,MAAM,aACNC,YAAY,QACZZ,MAAOU,KAAKlB,MAAMN,MAClB2B,SAAUH,KAAKjB,eAEjB,yBAAKe,UAAU,SAASE,KAAKlB,MAAMH,aAErC,6BACE,6CACA,2BACEmB,UAAU,QACVvB,KAAK,WACL0B,MAAM,gBACNC,YAAY,WACZf,KAAK,WACLG,MAAOU,KAAKlB,MAAML,SAClB0B,SAAUH,KAAKjB,eAEjB,yBAAKe,UAAU,SAASE,KAAKlB,MAAMF,gBAErC,4BAAQO,KAAK,SAASW,UAAU,UAAhC,UAGA,yBAAKA,UAAU,kB,GA9FqBM,IAAMC,WCiEnCC,E,4MA9EbxB,MAAQ,CACNyB,SAAS,G,uDAIT,OACE,yBAAKT,UAAU,OACb,kBAAC,EAAD,W,GARUO,aCIEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.b909aadd.chunk.js","sourcesContent":["import React from \"react\";\r\n//import Button from \"../Button\";\r\nimport \"./Form.css\";\r\n//import Input from \"../Input\";\r\n\r\n/*const Form = ({ children, onSubmit }) => (\r\n  <form className=\"form\" onSubmit={onSubmit}>\r\n    {children}\r\n    <Button disabled={!onSubmit}>Submit</Button>\r\n  </form>\r\n);\r\n*/\r\n\r\nconst initialState = {\r\n  name: \"\",\r\n  email: \"\",\r\n  password: \"\",\r\n  nameError: \"\",\r\n  emailError: \"\",\r\n  passwordError: \"\",\r\n};\r\n\r\nexport default class ValidationForm extends React.Component {\r\n  state = initialState;\r\n\r\n  handleChange = (event) => {\r\n    const isCheckbox = event.target.type === \"checkbox\";\r\n    this.setState({\r\n      [event.target.name]: isCheckbox\r\n        ? event.target.checked\r\n        : event.target.value,\r\n    });\r\n  };\r\n\r\n  validate = () => {\r\n    let nameError = \"\";\r\n    let emailError = \"\";\r\n    let passwordError = \"\";\r\n\r\n    if (!this.state.name) {\r\n      nameError = \"type your name\";\r\n    }\r\n\r\n    if (!this.state.email.includes(\"@\")) {\r\n      emailError = \"invalid email\";\r\n    }\r\n\r\n    if (this.state.password.length < 6) {\r\n      passwordError = \"your password must be at least  6 characters\";\r\n    }\r\n\r\n    if (nameError || emailError || passwordError) {\r\n      this.setState({ nameError, emailError, passwordError });\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  };\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    const isValid = this.validate();\r\n    if (isValid) {\r\n      console.log(this.state);\r\n      // clear form\r\n      this.setState(initialState);\r\n    }\r\n    /*if (isValid) {\r\n      console.log(\"thank you\");\r\n    }*/\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form className=\"form\" onSubmit={this.handleSubmit}>\r\n        <div>\r\n          <h1>Your name</h1>\r\n          <input\r\n            className=\"input\"\r\n            name=\"name\"\r\n            label=\"Your name\"\r\n            placeholder=\"name\"\r\n            type=\"text\"\r\n            value={this.state.name}\r\n            onChange={this.handleChange}\r\n          />\r\n          <div className=\"error\">{this.state.nameError}</div>\r\n        </div>\r\n        <div>\r\n          <h1>Your email</h1>\r\n          <input\r\n            className=\"input\"\r\n            name=\"email\"\r\n            label=\"Your email\"\r\n            placeholder=\"email\"\r\n            value={this.state.email}\r\n            onChange={this.handleChange}\r\n          />\r\n          <div className=\"error\">{this.state.emailError}</div>\r\n        </div>\r\n        <div>\r\n          <h1>Your password</h1>\r\n          <input\r\n            className=\"input\"\r\n            name=\"password\"\r\n            label=\"Your password\"\r\n            placeholder=\"password\"\r\n            type=\"password\"\r\n            value={this.state.password}\r\n            onChange={this.handleChange}\r\n          />\r\n          <div className=\"error\">{this.state.passwordError}</div>\r\n        </div>\r\n        <button type=\"submit\" className=\"submit\">\r\n          submit\r\n        </button>\r\n        <div className=\"response\"></div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\n//export default Form;\r\n","//import React, { useState } from \"react\";\r\nimport React, { Component } from \"react\";\r\nimport \"./App.css\";\r\n//import ValidationForm from \"./components/ValidationForm\";\r\nimport Form from \"./components/Form\";\r\n//import Input from \"./components/Input\";\r\n//import Button from \"./components/Button\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    visible: true,\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Form />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n/*function App() {\r\n  const [userData, setUserData] = useState({});\r\n  const onChangeInput = (event) =>\r\n    setUserData({ ...userData, [event.target.id]: event.target.value });\r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    console.log(userData);\r\n  };\r\n\r\n  let showErrors = (event) => {\r\n    event.preventDefault();\r\n    return (\r\n      (userData.name = onChangeInput\r\n        ? (userData.name = \"\")\r\n        : \"Type your name\") &&\r\n      (userData.email = onChangeInput ? (Input = !\"@\") : \"Email not valid\") &&\r\n      (userData.password = onChangeInput\r\n        ? Input.length < 6\r\n        : \"Password must be 6 characters long!\")\r\n    );\r\n  };\r\n\r\n  const validateForm = () => {\r\n    //return userData.password && userData.password === userData.confirmPassword;\r\n    //return showErrors;\r\n    return userData.name && userData.email && userData.password === showErrors;\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <div className=\"container\">\r\n        <Form onSubmit={validateForm() ? onFormSubmit : null}>\r\n          <Input\r\n            id=\"name\"\r\n            label=\"Your name\"\r\n            placeholder=\"Name\"\r\n            onChange={onChangeInput}\r\n            type=\"text\"\r\n            value={userData.name}\r\n          />\r\n          <div className=\"emessage\"></div>\r\n          <Input\r\n            id=\"email\"\r\n            label=\"Your email\"\r\n            placeholder=\"Email\"\r\n            onChange={onChangeInput}\r\n            type=\"email\"\r\n            value={userData.email}\r\n          />\r\n          <div className=\"emessage\"></div>\r\n          <Input\r\n            id=\"password\"\r\n            label=\"Your password\"\r\n            placeholder=\"Password\"\r\n            onChange={onChangeInput}\r\n            type=\"password\"\r\n            value={userData.password}\r\n          />\r\n          <div className=\"emessage\"></div>\r\n        </Form>\r\n      </div>\r\n    </div>\r\n  );\r\n}*/\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}